# app.py ‚Äî Stock Dashboard (UI n√¢ng c·∫•p + ChatGPT)
import streamlit as st
import pandas as pd
import numpy as np
from datetime import date
import plotly.graph_objects as go
import os
from openai import OpenAI

# Prophet (t√πy ch·ªçn)
HAS_PROPHET = True
try:
    from prophet import Prophet
except Exception:
    HAS_PROPHET = False

# =================== PAGE CONFIG ===================
st.set_page_config(
    page_title="Stock Forecast Dashboard",
    layout="wide",
    initial_sidebar_state="expanded"
)

# =================== THEME & CSS ===================
THEME_CSS = """
<style>
.stApp { background: #0f1220; color: #e8eef9; }
h1, h2, h3 { color: #ffd166; }
hr { border: 0; height: 1px; background: #22263a; }
.card {
  background: #151936; border: 1px solid #23284b; border-radius: 16px;
  padding: 16px; box-shadow: 0 6px 18px rgba(0,0,0,0.25);
}
.small { font-size: 12px; color: #9aa4bf; }
</style>
"""
st.markdown(THEME_CSS, unsafe_allow_html=True)

st.title("üìä Stock Price Dashboard & Forecast")

# =================== SIDEBAR ===================
st.sidebar.header("üß≠ ƒêi·ªÅu h∆∞·ªõng")
page = st.sidebar.radio(
    "Ch·ªçn trang",
    ["üìä Dashboard", "üîÆ D·ª± b√°o", "ü§ñ ChatGPT"],
    index=0
)

st.sidebar.header("üìÇ D·ªØ li·ªáu")
uploaded = st.sidebar.file_uploader("T·∫£i CSV (all_stocks_5yr.csv)", type=["csv"])

date_filter_on = st.sidebar.checkbox("L·ªçc theo kho·∫£ng ng√†y", value=False)
start_date = st.sidebar.date_input("T·ª´ ng√†y", value=date(2016, 1, 1))
end_date   = st.sidebar.date_input("ƒê·∫øn ng√†y", value=date(2018, 2, 7))

st.sidebar.markdown("---")

# =================== LOAD DATA ===================
@st.cache_data(show_spinner=False)
def load_df(file) -> pd.DataFrame:
    df = pd.read_csv(file)
    df.columns = [c.lower() for c in df.columns]
    if "name" not in df.columns and "Name" in df.columns:
        df["name"] = df["Name"]
    df["date"] = pd.to_datetime(df["date"])
    return df

if uploaded is None and page != "ü§ñ ChatGPT":
    st.info("‚¨ÜÔ∏è H√£y t·∫£i file CSV ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
    st.stop()

if uploaded is not None:
    df = load_df(uploaded)
    if "name" not in df.columns:
        st.error("Kh√¥ng t√¨m th·∫•y c·ªôt 'name' (m√£ c·ªï phi·∫øu). H√£y ki·ªÉm tra CSV.")
        st.stop()

    tickers = sorted(df["name"].unique().tolist())
    ticker = st.sidebar.selectbox("Ch·ªçn m√£ c·ªï phi·∫øu", options=tickers, index=0)

    df_t = df[df["name"] == ticker].copy()
    if date_filter_on:
        df_t = df_t[(df_t["date"] >= pd.to_datetime(start_date)) & (df_t["date"] <= pd.to_datetime(end_date))]

    if df_t.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu sau khi l·ªçc. H√£y ƒë·ªïi m√£/t√πy ch·ªçn ng√†y.")
        st.stop()

# =================== METRICS (cards) ===================
def render_metrics(df_t):
    last_close = float(df_t["close"].iloc[-1])
    prev_close = float(df_t["close"].iloc[-2]) if len(df_t) > 1 else last_close
    chg_pct_1d = (last_close/prev_close - 1) * 100 if prev_close else 0.0

    if len(df_t) > 7:
        last_7 = float(df_t["close"].iloc[-7])
        chg_pct_7d = (last_close/last_7 - 1) * 100
    else:
        chg_pct_7d = np.nan

    c1, c2, c3 = st.columns(3)
    with c1:
        st.markdown(f"""<div class="card"><h3>Gi√° hi·ªán t·∫°i</h3>
        <div style="font-size:28px;font-weight:700">${last_close:,.2f}</div>
        <div class="small">Close g·∫ßn nh·∫•t</div></div>""", unsafe_allow_html=True)
    with c2:
        st.markdown(f"""<div class="card"><h3>Thay ƒë·ªïi 1 ng√†y</h3>
        <div style="font-size:28px;font-weight:700">{chg_pct_1d:+.2f}%</div>
        <div class="small">So v·ªõi phi√™n tr∆∞·ªõc</div></div>""", unsafe_allow_html=True)
    with c3:
        val7 = "-" if np.isnan(chg_pct_7d) else f"{chg_pct_7d:+.2f}%"
        st.markdown(f"""<div class="card"><h3>Thay ƒë·ªïi 7 ng√†y</h3>
        <div style="font-size:28px;font-weight:700">{val7}</div>
        <div class="small">So v·ªõi 7 phi√™n tr∆∞·ªõc</div></div>""", unsafe_allow_html=True)

    st.markdown("<hr/>", unsafe_allow_html=True)

# =================== PLOTS ===================
def plot_candlestick(_df: pd.DataFrame, ticker: str):
    fig = go.Figure(data=[go.Candlestick(
        x=_df["date"],
        open=_df["open"],
        high=_df["high"],
        low=_df["low"],
        close=_df["close"],
        name="OHLC"
    )])
    fig.update_layout(
        title=f"Candlestick ‚Äî {ticker}",
        xaxis_title="Ng√†y",
        yaxis_title="Gi√° (USD)",
        margin=dict(l=10,r=10,t=40,b=10),
        height=480
    )
    return fig

def plot_volume(_df: pd.DataFrame):
    fig = go.Figure()
    fig.add_trace(go.Bar(x=_df["date"], y=_df["volume"], name="Volume"))
    fig.update_layout(
        title="Kh·ªëi l∆∞·ª£ng giao d·ªãch",
        xaxis_title="Ng√†y",
        yaxis_title="S·ªë l∆∞·ª£ng",
        margin=dict(l=10,r=10,t=40,b=10),
        height=240
    )
    return fig

# =================== CHATGPT TAB ===================
def chat_tab():
    st.header("ü§ñ ChatGPT tr·ª£ l√Ω ph√¢n t√≠ch")

    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        st.error("Thi·∫øu OPENAI_API_KEY. H√£y c·∫•u h√¨nh bi·∫øn m√¥i tr∆∞·ªùng tr√™n server.")
        return

    client = OpenAI(api_key=api_key)

    if "chat_messages" not in st.session_state:
        st.session_state.chat_messages = [
            {"role": "system", "content": "B·∫°n l√† chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh, tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng."}
        ]

    # hi·ªÉn th·ªã l·ªãch s·ª≠
    for m in st.session_state.chat_messages:
        if m["role"] == "user":
            with st.chat_message("user"):
                st.markdown(m["content"])
        elif m["role"] in ("assistant", "system"):
            with st.chat_message("assistant"):
                st.markdown(m["content"])

    prompt = st.chat_input("Nh·∫≠p c√¢u h·ªèi (v√≠ d·ª•: 'Ph√¢n t√≠ch c·ªï phi·∫øu AAPL')")
    if prompt:
        st.session_state.chat_messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        with st.chat_message("assistant"):
            with st.spinner("ƒêang suy nghƒ©..."):
                resp = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=st.session_state.chat_messages,
                    temperature=0.3
                )
                answer = resp.choices[0].message.content
                st.markdown(answer)

        st.session_state.chat_messages.append({"role": "assistant", "content": answer})

# =================== PAGE ROUTING ===================
if page == "üìä Dashboard" and uploaded is not None:
    render_metrics(df_t)
    tab1, tab2 = st.tabs(["üìà Gi√° & Kh·ªëi l∆∞·ª£ng", "üìã Th·ªëng k√™ m√¥ t·∫£"])
    with tab1:
        st.plotly_chart(plot_candlestick(df_t, ticker), use_container_width=True)
        st.plotly_chart(plot_volume(df_t), use_container_width=True)
    with tab2:
        st.dataframe(df_t[["open","high","low","close","volume"]].describe().round(3))

elif page == "üîÆ D·ª± b√°o" and uploaded is not None:
    if not HAS_PROPHET:
        st.error("Prophet ch∆∞a ƒë∆∞·ª£c c√†i. Ch·∫°y: pip install prophet")
        st.stop()

    st.subheader(f"üîÆ D·ª± b√°o v·ªõi Prophet ‚Äî {ticker}")

    colA, colB, colC = st.columns([1,1,1])
    with colA:
        horizon = st.slider("S·ªë ng√†y d·ª± b√°o", 30, 730, 365, step=15)
    with colB:
        weekly = st.checkbox("Weekly seasonality", value=True)
    with colC:
        show_ci = st.checkbox("Hi·ªÉn th·ªã kho·∫£ng tin c·∫≠y", value=True)

    data_p = df_t[["date","close"]].rename(columns={"date":"ds","close":"y"}).reset_index(drop=True)
    m = Prophet(daily_seasonality=False, weekly_seasonality=weekly, yearly_seasonality=True)
    m.fit(data_p)

    future = m.make_future_dataframe(periods=horizon, freq="B")
    fc = m.predict(future)

    fig = go.Figure()
    fig.add_trace(go.Scatter(x=data_p["ds"], y=data_p["y"], mode="lines", name="Gi√° th·ª±c t·∫ø"))
    fig.add_trace(go.Scatter(x=fc["ds"], y=fc["yhat"], mode="lines", name="Gi√° d·ª± b√°o"))

    if show_ci:
        fig.add_trace(go.Scatter(x=fc["ds"], y=fc["yhat_upper"], mode="lines",
                                 line=dict(width=0), showlegend=False))
        fig.add_trace(go.Scatter(x=fc["ds"], y=fc["yhat_lower"], mode="lines",
                                 line=dict(width=0), fill="tonexty",
                                 name="Kho·∫£ng tin c·∫≠y", hoverinfo="skip"))

    fig.update_layout(
        title=f"D·ª± b√°o {horizon} ng√†y ti·∫øp theo",
        xaxis_title="Ng√†y", yaxis_title="Gi√° ƒë√≥ng c·ª≠a (USD)",
        margin=dict(l=10,r=10,t=40,b=10), height=520
    )
    st.plotly_chart(fig, use_container_width=True)

    with st.expander("üìë Xem b·∫£ng d·ª± b√°o (cu·ªëi)"):
        st.dataframe(fc[["ds","yhat","yhat_lower","yhat_upper"]].tail(30))

elif page == "ü§ñ ChatGPT":
    chat_tab()
